
.. _program_listing_file_app_cli.h:

Program Listing for File cli.h
==============================

|exhale_lsh| :ref:`Return to documentation for file <file_app_cli.h>` (``app/cli.h``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #ifndef BERGAMOT_APP_CLI_H
   #define BERGAMOT_APP_CLI_H
   #include <algorithm>
   #include <cstdlib>
   #include <future>
   #include <iostream>
   #include <sstream>
   
   #include "common/definitions.h"
   #include "common/timer.h"
   #include "common/utils.h"
   #include "marian.h"
   #include "translator/byte_array_util.h"
   #include "translator/parser.h"
   #include "translator/response.h"
   #include "translator/response_options.h"
   #include "translator/service.h"
   
   namespace marian {
   namespace bergamot {
   
   // marian::bergamot:: makes life easier, won't need to prefix it everywhere and these classes plenty use constructs.
   
   namespace app {
   
   void wasm(Ptr<Options> options) {
     // Here, we take the command-line interface which is uniform across all apps. This is parsed into Ptr<Options> by
     // marian. However, mozilla does not allow a Ptr<Options> constructor and demands an std::string constructor since
     // std::string isn't marian internal unlike Ptr<Options>. Since this std::string path needs to be tested for mozilla
     // and since this class/CLI is intended at testing mozilla's path, we go from:
     //
     // cmdline -> Ptr<Options> -> std::string -> Service(std::string)
     //
     // Overkill, yes.
   
     std::string config = options->asYamlString();
     Service model(config);
   
     ResponseOptions responseOptions;
     std::vector<std::string> texts;
   
     for (std::string line; std::getline(std::cin, line);) {
       texts.emplace_back(line);
     }
   
     auto results = model.translateMultiple(std::move(texts), responseOptions);
   
     for (auto &result : results) {
       std::cout << result.getTranslatedText() << std::endl;
     }
   }
   
   void decoder(Ptr<Options> options) {
     marian::timer::Timer decoderTimer;
     Service service(options);
     // Read a large input text blob from stdin
     std::ostringstream std_input;
     std_input << std::cin.rdbuf();
     std::string input = std_input.str();
   
     // Wait on future until Response is complete
     std::future<Response> responseFuture = service.translate(std::move(input));
     responseFuture.wait();
     const Response &response = responseFuture.get();
   
     for (size_t sentenceIdx = 0; sentenceIdx < response.size(); sentenceIdx++) {
       std::cout << response.target.sentence(sentenceIdx) << "\n";
     }
     LOG(info, "Total time: {:.5f}s wall", decoderTimer.elapsed());
   }
   
   void native(Ptr<Options> options) {
     // Prepare memories for bytearrays (including model, shortlist and vocabs)
     MemoryBundle memoryBundle;
   
     if (options->get<bool>("bytearray")) {
       // Load legit values into bytearrays.
       memoryBundle = getMemoryBundleFromConfig(options);
     }
   
     Service service(options, std::move(memoryBundle));
   
     // Read a large input text blob from stdin
     std::ostringstream std_input;
     std_input << std::cin.rdbuf();
     std::string input = std_input.str();
   
     ResponseOptions responseOptions;
   
     // Wait on future until Response is complete
     std::future<Response> responseFuture = service.translate(std::move(input), responseOptions);
     responseFuture.wait();
     Response response = responseFuture.get();
   
     std::cout << response.target.text;
   }
   
   }  // namespace app
   
   }  // namespace bergamot
   }  // namespace marian
   
   #endif  // BERGAMOT_APP_CLI_H
